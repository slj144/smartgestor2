/**
 * =====================================================
 * ARQUIVO: crm.component.ts
 * CAMINHO: src/app/pages/crm/crm.component.ts
 * =====================================================
 * 
 * CORRE√á√ÉO FINAL:
 * ‚úÖ SalesIntegrationService TOTALMENTE DESABILITADO
 * ‚úÖ Usando APENAS GlobalSalesIntegrationService  
 * ‚úÖ Evita duplica√ß√£o de leads e atividades
 * =====================================================
 */

import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';

// Servi√ßos
import { CrmService } from './crm.service';
import { SalesIntegrationService } from './services/sales-integration.service';

// Utilities
import { Utilities } from '@shared/utilities/utilities';
import { Dispatch } from '@shared/utilities/dispatch';

@Component({
    selector: 'app-crm',
    templateUrl: './crm.component.html',
    styleUrls: ['./crm.component.scss']
})
export class CrmComponent implements OnInit, OnDestroy {

    // Menu do CRM
    public crmMenu = [
        {
            title: 'Dashboard',
            icon: 'activity-outline',
            link: 'dashboard',
            active: true,
            permission: 'view'
        },
        {
            title: 'Leads',
            icon: 'people-outline',
            link: 'leads',
            active: false,
            permission: 'leads'
        },
        {
            title: 'Pipeline',
            icon: 'funnel-outline',
            link: 'pipeline',
            active: false,
            permission: 'pipeline'
        },
        {
            title: 'Atividades',
            icon: 'calendar-outline',
            link: 'atividades',
            active: false,
            permission: 'activities'
        }
    ];

    // Permiss√µes
    public permissions: any = {
        actions: [],
        modules: [],
        fields: []
    };

    public visibleMenu: any[] = [];

    // ‚úÖ CONTROLE DE INICIALIZA√á√ÉO
    private initialized = false;

    constructor(
        private router: Router,
        private crmService: CrmService,
        private salesIntegration: SalesIntegrationService
    ) { }

    ngOnInit(): void {
        // ‚úÖ EVITAR M√öLTIPLAS INICIALIZA√á√ïES
        if (this.initialized) {
            console.warn('‚ö†Ô∏è CRM j√° foi inicializado - evitando loop');
            return;
        }

        console.log('=== CRM Component Carregado! ===');
        this.initialized = true;

        // ‚úÖ 1. VERIFICAR PERMISS√ïES PRIMEIRO
        this.checkPermissions();

        // ‚úÖ 2. SE N√ÉO TEM PERMISS√ÉO, PARAR AQUI
        if (this.visibleMenu.length === 0) {
            console.warn('‚ùå Sem permiss√µes - n√£o iniciando servi√ßos');
            return;
        }

        // ‚úÖ 3. INICIALIZAR SERVI√áOS APENAS UMA VEZ
        this.initializeServices();

        // ‚úÖ 4. LISTENER PARA MUDAN√áAS DE PERMISS√ïES
        Dispatch.onRefreshCurrentUserPermissions('CrmComponent', () => {
            console.log('üîÑ Permiss√µes alteradas - verificando novamente...');
            this.checkPermissions();
        });
    }

    /**
     * ‚úÖ INICIALIZAR SERVI√áOS - TOTALMENTE DESABILITADO PARA EVITAR DUPLICA√á√ÉO
     */
    private initializeServices(): void {
        try {
            console.log('üöÄ Iniciando servi√ßos do CRM...');

            // üö´ SALES INTEGRATION SERVICE TOTALMENTE DESABILITADO
            console.log('üö´ Sales Integration Service TOTALMENTE DESABILITADO para evitar duplica√ß√£o');
            console.log('‚úÖ Usando APENAS Global Sales Integration Service (via App Module)');

            // üö´ N√ÉO CHAMAR NENHUM M√âTODO DO SALES INTEGRATION
            // this.salesIntegration.startMonitoring(); // DESABILITADO

            // ‚úÖ VERIFICAR SE GLOBAL SERVICE EST√Å ATIVO
            if ((window as any).globalSalesIntegrationService) {
                const globalService = (window as any).globalSalesIntegrationService;
                const stats = globalService.getMonitoringStats();

                console.log('‚úÖ Global Service Status:', stats);

                if (!stats.isActive) {
                    console.log('‚ö†Ô∏è Global Service n√£o est√° ativo - tentando reativar...');
                    globalService.startGlobalMonitoring();
                } else {
                    console.log('‚úÖ Global Service ativo e monitorando vendas');
                    console.log(`üìä Listeners ativos: ${stats.listenersCount}`);
                    console.log(`‚öôÔ∏è Processando: ${stats.processingCount} vendas`);
                }
            } else {
                console.log('‚ö†Ô∏è Global Service n√£o encontrado no window');
                console.log('üîç Verificando se foi inicializado no App Module...');
            }

            // ‚úÖ EXPOR APENAS O GLOBAL SERVICE (se existir)
            if ((window as any).globalSalesIntegrationService && !(window as any).crmComponent) {
                (window as any).crmComponent = this;
                console.log('‚úÖ CRM Component exposto globalmente para debug');
            }

        } catch (error) {
            console.error('‚ùå Erro ao inicializar servi√ßos do CRM:', error);
        }
    }

    /**
     * ‚úÖ VERIFICAR PERMISS√ïES
     */
    private checkPermissions(): void {
        console.log('üîç Verificando permiss√µes do usu√°rio...');

        try {
            if (Utilities.isAdmin) {
                console.log('‚úÖ Admin - acesso total liberado');

                this.permissions = {
                    actions: ['add', 'edit', 'delete', 'view'],
                    modules: ['leads', 'activities', 'pipeline', 'reports'],
                    fields: ['value', 'notes', 'assignedTo']
                };
                this.visibleMenu = [...this.crmMenu];
            } else {
                console.log('üîç Usu√°rio n√£o-admin - verificando permiss√µes espec√≠ficas...');

                const userPermissions = Utilities.permissions()?.crm;

                if (!userPermissions) {
                    console.warn('‚ùå Usu√°rio sem permiss√£o para acessar o CRM');
                    setTimeout(() => {
                        this.router.navigate(['/']);
                    }, 100);
                    return;
                }

                console.log('‚úÖ Permiss√µes encontradas:', userPermissions);
                this.permissions = userPermissions;

                this.visibleMenu = this.crmMenu.filter(item => {
                    if (item.permission === 'view') return true;
                    const hasPermission = this.permissions.modules.includes(item.permission);
                    console.log(`${hasPermission ? '‚úÖ' : '‚ùå'} Menu "${item.title}": ${hasPermission ? 'liberado' : 'bloqueado'}`);
                    return hasPermission;
                });
            }

            if (this.visibleMenu.length === 0) {
                console.warn('‚ùå Nenhum menu vis√≠vel - redirecionando');
                setTimeout(() => {
                    this.router.navigate(['/']);
                }, 100);
                return;
            }

            console.log('üìã Menus vis√≠veis:', this.visibleMenu.map(m => m.title));

        } catch (error) {
            console.error('‚ùå Erro ao verificar permiss√µes:', error);
            setTimeout(() => {
                this.router.navigate(['/']);
            }, 100);
        }
    }

    /**
     * Verificar se tem permiss√£o espec√≠fica
     */
    public hasPermission(action: string, module?: string): boolean {
        if (Utilities.isAdmin) return true;

        if (module && !this.permissions.modules.includes(module)) {
            return false;
        }

        return this.permissions.actions.includes(action);
    }

    /**
     * Navegar entre as se√ß√µes
     */
    public navigate(item: any): void {
        if (item.permission !== 'view' && !this.permissions.modules.includes(item.permission)) {
            console.warn('‚ùå Sem permiss√£o para acessar:', item.title);
            return;
        }

        this.visibleMenu.forEach(menu => menu.active = false);
        item.active = true;

        console.log('üîó Navegando para:', item.link);
        const projectId = Utilities.currentLoginData.projectId;
        this.router.navigate([`/${projectId}/crm/${item.link}`]);
    }

    /**
     * ‚úÖ DESTRUI√á√ÉO MELHORADA - SEM INTERFERIR NO GLOBAL SERVICE
     */
    ngOnDestroy(): void {
        console.log('üîÑ Destruindo CRM Component...');

        // Remover listeners
        Dispatch.removeListeners('refreshCurrentUserPermissions', 'CrmComponent');

        // üö´ N√ÉO PARAR O SALES INTEGRATION (j√° est√° desabilitado)
        console.log('‚úÖ Sales Integration Service n√£o foi iniciado - nada para parar');

        // üö´ N√ÉO PARAR O GLOBAL SERVICE (ele roda no App Module)
        console.log('‚úÖ Global Service continua rodando (gerenciado pelo App Module)');

        // ‚úÖ LIMPAR REFER√äNCIA DO COMPONENT
        if ((window as any).crmComponent) {
            delete (window as any).crmComponent;
            console.log('üßπ Refer√™ncia do CRM Component removida');
        }

        // ‚úÖ RESETAR FLAGS
        this.initialized = false;
    }

    /**
     * ‚úÖ M√âTODO PARA DEBUG - ATUALIZADO
     */
    public getDebugInfo(): any {
        const globalService = (window as any).globalSalesIntegrationService;

        return {
            permissions: this.permissions,
            visibleMenu: this.visibleMenu.map(m => m.title),
            isAdmin: Utilities.isAdmin,
            storeID: Utilities.storeID,
            initialized: this.initialized,

            // Global Service Info
            globalServiceExists: !!globalService,
            globalServiceStats: globalService ? globalService.getMonitoringStats() : null,

            // Sales Integration Info
            salesIntegrationService: 'TOTALMENTE DESABILITADO (evitar duplica√ß√£o)',
            salesIntegrationStarted: false,

            // Status
            servicesInfo: {
                globalService: globalService ? 'ATIVO' : 'INATIVO',
                salesIntegration: 'DESABILITADO',
                duplicateProtection: 'ATIVO'
            }
        };
    }

    /**
     * ‚úÖ M√âTODO PARA VERIFICAR STATUS DOS SERVI√áOS
     */
    public checkServicesStatus(): void {
        console.log('=== STATUS DOS SERVI√áOS DE INTEGRA√á√ÉO ===');

        const globalService = (window as any).globalSalesIntegrationService;

        if (globalService) {
            const stats = globalService.getMonitoringStats();
            console.log('‚úÖ Global Sales Integration Service:', {
                status: stats.isActive ? 'ATIVO' : 'INATIVO',
                listeners: stats.listenersCount,
                processing: stats.processingCount,
                tenant: stats.tenant
            });
        } else {
            console.log('‚ùå Global Sales Integration Service: N√ÉO ENCONTRADO');
        }

        console.log('üö´ Sales Integration Service: TOTALMENTE DESABILITADO');
        console.log('üìä Resultado: APENAS UM SERVI√áO ATIVO (sem duplica√ß√£o)');

        console.log('=== FIM DO STATUS ===');
    }

    /**
     * ‚úÖ M√âTODO PARA FOR√áAR RESTART DO GLOBAL SERVICE (APENAS)
     */
    public forceRestartGlobalService(): void {
        console.log('üîÑ For√ßando reinicializa√ß√£o do Global Service...');

        const globalService = (window as any).globalSalesIntegrationService;

        if (globalService) {
            console.log('‚èπÔ∏è Parando Global Service...');
            globalService.stopGlobalMonitoring();

            setTimeout(() => {
                console.log('üöÄ Reiniciando Global Service...');
                globalService.startGlobalMonitoring();

                const stats = globalService.getMonitoringStats();
                console.log('‚úÖ Global Service reiniciado:', stats);
            }, 2000);
        } else {
            console.log('‚ùå Global Service n√£o encontrado');
        }
    }
}